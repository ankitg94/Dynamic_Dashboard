{"version":3,"file":"static/js/861.a82d996b.chunk.js","mappings":"oLA+GA,MA8FA,EA9F0BA,KACxB,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,CAAC,IACrCC,EAAmBC,IAAwBF,EAAAA,EAAAA,UAAS,CAAC,IACrDG,EAAQC,IAAaJ,EAAAA,EAAAA,UAAS,KAErCK,EAAAA,EAAAA,YAAU,KACUC,WAChB,IACE,MAAMC,QAAiBC,EAAAA,EAAMC,IAAI,2BAI3BC,EAHSH,EAASI,KAAKC,OAGFC,QAAO,CAACC,EAAKC,KAClCA,IACFD,EAAIC,IAAUD,EAAIC,IAAU,GAAK,GAE5BD,IACN,CAAC,GAEJf,EAAaW,GACbR,EAAqBQ,GACrBM,EAAAA,GAAMC,QAAQ,4BAChB,CAAE,MAAOC,GACPF,EAAAA,GAAME,MAAM,uBACZC,QAAQD,MAAMA,EAChB,GAGFE,EAAW,GACV,KAEHf,EAAAA,EAAAA,YAAU,KAER,GAAIF,EAAQ,CACV,MAAMkB,EAAeC,OAAOC,KAAKzB,GAAWe,QAAO,CAACC,EAAKU,KACnDA,EAAIC,cAAcC,SAASvB,EAAOsB,iBACpCX,EAAIU,GAAO1B,EAAU0B,IAEhBV,IACN,CAAC,GACJZ,EAAqBmB,EACvB,MACEnB,EAAqBJ,EACvB,GACC,CAACK,EAAQL,IAEZ,MAGM6B,EAAY,CAChBC,OAJaN,OAAOC,KAAKtB,GAKzB4B,SAAU,CACR,CACEC,MAAO,cACPnB,KAPOW,OAAOS,OAAO9B,GAQrB+B,gBAAiB,CACf,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,YAAa,yBACbC,YAAa,KAKnB,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BC,SAAA,EACvCC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,KACPD,EAAAA,EAAAA,KAACE,EAAAA,GAAO,KACRL,EAAAA,EAAAA,MAAA,QAAMC,UAAU,8BAA6BC,SAAA,EAC3CC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,0BAAyBC,SAAC,aACxCC,EAAAA,EAAAA,KAAA,SACEG,KAAK,OACLC,YAAY,mBACZC,MAAOxC,EACPyC,SAAWC,GAAMzC,EAAUyC,EAAEC,OAAOH,OACpCP,UAAU,6FAEZE,EAAAA,EAAAA,KAAA,WAASF,UAAU,SAAQC,UACzBC,EAAAA,EAAAA,KAACS,EAAAA,GAAG,CAACpC,KAAMgB,WAGX,C,6DCvMV,MAgBA,EAhBeY,KAEXD,EAAAA,EAAAA,KAAAU,EAAAA,SAAA,CAAAX,UACEF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oDAAmDC,SAAA,EAClEC,EAAAA,EAAAA,KAACW,EAAAA,GAAI,CAACC,GAAG,IAAId,UAAU,sBAAqBC,SAAC,2BAE7CF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAACW,EAAAA,GAAI,CAACC,GAAG,IAAId,UAAU,qBAAoBC,SAAC,UAC5CC,EAAAA,EAAAA,KAACW,EAAAA,GAAI,CAACC,GAAG,aAAcd,UAAU,qBAAoBC,SAAC,qB","sources":["PagesFilter/SectorChartFilter.js","components/Navbar.js"],"sourcesContent":["\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { Pie } from 'react-chartjs-2';\r\n// import toast, { Toaster } from 'react-hot-toast';\r\n// import 'chart.js/auto'; // Ensure all chart types are loaded\r\n// import Navbar from '../components/Navbar';\r\n\r\n\r\n// const SectorChartFilter = () => {\r\n//   const [topicData, setTopicData] = useState({});\r\n//   const [filteredTopicData, setFilteredTopicData] = useState({});\r\n//   const [filter, setFilter] = useState('');\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         const response = await axios.get('/api/v1/data/get-sector');\r\n//         const topics = response.data.sector;\r\n\r\n//         // Count the occurrences of each topic\r\n//         const topicCounts = topics.reduce((acc, topic) => {\r\n//           if (topic) {\r\n//             acc[topic] = (acc[topic] || 0) + 1;\r\n//           }\r\n//           return acc;\r\n//         }, {});\r\n\r\n//         setTopicData(topicCounts);\r\n//         setFilteredTopicData(topicCounts); // Initially, filtered data is the same as the original data\r\n//         toast.success(\"Data fetched successfully\");\r\n//       } catch (error) {\r\n//         toast.error('Error fetching data');\r\n//         console.error(error);\r\n//       }\r\n//     };\r\n\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     // Filter the topic data based on the filter input\r\n//     if (filter) {\r\n//       const filteredData = Object.keys(topicData).reduce((acc, key) => {\r\n//         if (key.toLowerCase().includes(filter.toLowerCase())) {\r\n//           acc[key] = topicData[key];\r\n//         }\r\n//         return acc;\r\n//       }, {});\r\n//       setFilteredTopicData(filteredData);\r\n//     } else {\r\n//       setFilteredTopicData(topicData);\r\n//     }\r\n//   }, [filter, topicData]);\r\n\r\n//   const labels = Object.keys(filteredTopicData);\r\n//   const data = Object.values(filteredTopicData);\r\n\r\n//   const chartData = {\r\n//     labels,\r\n//     datasets: [\r\n//       {\r\n//         label: 'Occurrences',\r\n//         data,\r\n//         backgroundColor: [\r\n//           '#FF6384',\r\n//           '#36A2EB',\r\n//           '#FFCE56',\r\n//           '#4BC0C0',\r\n//           '#9966FF',\r\n//           '#FF9F40',\r\n//           '#FF6384',\r\n//           '#36A2EB',\r\n//           '#FFCE56',\r\n//           '#4BC0C0',\r\n//         ], // You can add more colors or use a dynamic color generation\r\n//         borderColor: 'rgba(255, 255, 255, 1)',\r\n//         borderWidth: 2,\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <Toaster />\r\n//       <Navbar/>\r\n//       <main className=\"chart-container\">\r\n//         <h1>Sectors</h1>\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Filter topics...\"\r\n//           value={filter}\r\n//           onChange={(e) => setFilter(e.target.value)}\r\n//         />\r\n//         <section>\r\n//           <Pie data={chartData} />\r\n//         </section>\r\n//       </main>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default SectorChartFilter;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport toast, { Toaster } from 'react-hot-toast';\r\nimport Navbar from '../components/Navbar';\r\n\r\nconst SectorChartFilter = () => {\r\n  const [topicData, setTopicData] = useState({});\r\n  const [filteredTopicData, setFilteredTopicData] = useState({});\r\n  const [filter, setFilter] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get('/api/v1/data/get-sector');\r\n        const topics = response.data.sector;\r\n\r\n        // Count the occurrences of each topic\r\n        const topicCounts = topics.reduce((acc, topic) => {\r\n          if (topic) {\r\n            acc[topic] = (acc[topic] || 0) + 1;\r\n          }\r\n          return acc;\r\n        }, {});\r\n\r\n        setTopicData(topicCounts);\r\n        setFilteredTopicData(topicCounts); // Initially, filtered data is the same as the original data\r\n        toast.success(\"Data fetched successfully\");\r\n      } catch (error) {\r\n        toast.error('Error fetching data');\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Filter the topic data based on the filter input\r\n    if (filter) {\r\n      const filteredData = Object.keys(topicData).reduce((acc, key) => {\r\n        if (key.toLowerCase().includes(filter.toLowerCase())) {\r\n          acc[key] = topicData[key];\r\n        }\r\n        return acc;\r\n      }, {});\r\n      setFilteredTopicData(filteredData);\r\n    } else {\r\n      setFilteredTopicData(topicData);\r\n    }\r\n  }, [filter, topicData]);\r\n\r\n  const labels = Object.keys(filteredTopicData);\r\n  const data = Object.values(filteredTopicData);\r\n\r\n  const chartData = {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        label: 'Occurrences',\r\n        data,\r\n        backgroundColor: [\r\n          '#FF6384',\r\n          '#36A2EB',\r\n          '#FFCE56',\r\n          '#4BC0C0',\r\n          '#9966FF',\r\n          '#FF9F40',\r\n          '#FF6384',\r\n          '#36A2EB',\r\n          '#FFCE56',\r\n          '#4BC0C0',\r\n        ], // You can add more colors or use a dynamic color generation\r\n        borderColor: 'rgba(255, 255, 255, 1)',\r\n        borderWidth: 2,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-100\">\r\n      <Navbar />\r\n      <Toaster />\r\n      <main className=\"container mx-auto px-4 py-8\">\r\n        <h1 className=\"text-3xl font-bold mb-4\">Sectors</h1>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Filter topics...\"\r\n          value={filter}\r\n          onChange={(e) => setFilter(e.target.value)}\r\n          className=\"w-full p-2 mb-4 rounded border border-gray-300 focus:outline-none focus:border-blue-500\"\r\n        />\r\n        <section className=\"w-full\">\r\n          <Pie data={chartData} />\r\n        </section>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectorChartFilter;\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nconst Navbar = () => {\r\n  return (\r\n    <>\r\n      <nav className=\"flex justify-between items-center bg-gray-600 p-4\">\r\n      <Link to=\"/\" className=\"text-white text-2xl\">BlackCoffer Assigment\r\n      </Link>\r\n      <div className=\"flex gap-4\">\r\n        <Link to=\"/\" className=\"text-white text-lg\">Home</Link>\r\n        <Link to=\"/dashboard\"  className=\"text-white text-lg\">Dashboard</Link>\r\n      </div>\r\n    </nav>\r\n \r\n    </>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n"],"names":["SectorChartFilter","topicData","setTopicData","useState","filteredTopicData","setFilteredTopicData","filter","setFilter","useEffect","async","response","axios","get","topicCounts","data","sector","reduce","acc","topic","toast","success","error","console","fetchData","filteredData","Object","keys","key","toLowerCase","includes","chartData","labels","datasets","label","values","backgroundColor","borderColor","borderWidth","_jsxs","className","children","_jsx","Navbar","Toaster","type","placeholder","value","onChange","e","target","Pie","_Fragment","Link","to"],"sourceRoot":""}