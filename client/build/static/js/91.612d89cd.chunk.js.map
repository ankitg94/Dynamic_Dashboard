{"version":3,"file":"static/js/91.612d89cd.chunk.js","mappings":"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","sources":["PagesFilter/PestFilter.js","ReactCharts/Barcharts.js","components/Navbar.js"],"sourcesContent":["// // import React, { useState, useEffect } from 'react';\r\n// // import axios from 'axios';\r\n// // import { BarChart } from '../ReactCharts/Barcharts'; // Adjust the import path as needed\r\n// // import toast, { Toaster } from 'react-hot-toast';\r\n\r\n// // const SourceFilter=() => {\r\n\r\n// //   const [countryLabels, setCountryLabels] = useState([]);\r\n// //   const [countryCounts, setCountryCounts] = useState([]);\r\n\r\n// //   useEffect(() => {\r\n// //     const fetchData = async () => {\r\n// //       try {\r\n// //         const userResponse = await axios.get('/api/v1/data/get-source');\r\n// //         const countries = userResponse.data.source.filter(Boolean); // Filter out empty strings\r\n// //         const countryCountMap = countries.reduce((acc, country) => {\r\n// //           acc[country] = (acc[country] || 0) + 1;\r\n// //           return acc;\r\n// //         }, {});\r\n\r\n// //         const labels = Object.keys(countryCountMap);\r\n// //         const counts = Object.values(countryCountMap);\r\n\r\n// //         setCountryLabels(labels);\r\n// //         setCountryCounts(counts);\r\n\r\n// //         toast.success(\"Data fetched successfully\");\r\n// //       } catch (error) {\r\n// //         toast.error('Error fetching data');\r\n// //         console.error(error);\r\n// //       }\r\n// //     };\r\n\r\n// //     fetchData();\r\n// //   }, []);\r\n\r\n// //   return (\r\n// //     <>\r\n// //       <div>\r\n// //         <Toaster />\r\n// //         <main className=\"chart-container\">\r\n// //           <h1>Source Distribution</h1>\r\n// //           <section>\r\n// //             <BarChart\r\n// //               data_1={countryCounts}\r\n// //               data_2={[]} // No second dataset needed\r\n// //               title_1=\"Country Count\"\r\n// //               title_2=\"\"\r\n// //               bgColor_1=\"rgba(53, 162, 255, 0.5)\"\r\n// //               bgColor_2=\"\"\r\n// //               labels={countryLabels}\r\n// //               horizontal={true} // Adjust as necessary\r\n// //             />\r\n// //             <h2>Country Occurrences</h2>\r\n// //           </section>\r\n// //         </main>\r\n// //       </div>\r\n// //     </>\r\n// //   );\r\n// // }\r\n\r\n// // export default SourceFilter;\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { BarChart } from '../ReactCharts/Barcharts'; // Adjust the import path as needed\r\n// import toast, { Toaster } from 'react-hot-toast';\r\n// import Navbar from \"../components/Navbar\"\r\n// const SourceFilter = () => {\r\n//   const [countryLabels, setCountryLabels] = useState([]);\r\n//   const [countryCounts, setCountryCounts] = useState([]);\r\n//   const [filterText, setFilterText] = useState('');\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         const userResponse = await axios.get('/api/v1/data/get-pestle');\r\n//         const countries = userResponse.data.Pest.filter(Boolean); // Filter out empty strings\r\n//         const countryCountMap = countries.reduce((acc, country) => {\r\n//           acc[country] = (acc[country] || 0) + 1;\r\n//           return acc;\r\n//         }, {});\r\n\r\n//         const labels = Object.keys(countryCountMap);\r\n//         const counts = Object.values(countryCountMap);\r\n\r\n//         setCountryLabels(labels);\r\n//         setCountryCounts(counts);\r\n\r\n//         toast.success(\"Data fetched successfully\");\r\n//       } catch (error) {\r\n//         toast.error('Error fetching data');\r\n//         console.error(error);\r\n//       }\r\n//     };\r\n\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   const handleFilterChange = (event) => {\r\n//     setFilterText(event.target.value);\r\n//   };\r\n\r\n//   const filteredLabels = countryLabels.filter((label) =>\r\n//     label.toLowerCase().includes(filterText.toLowerCase())\r\n//   );\r\n//   const filteredCounts = filteredLabels.map((label) => countryCounts[countryLabels.indexOf(label)]);\r\n\r\n//   return (\r\n//     <>\r\n//       <div>\r\n//         <Navbar/>\r\n//         <Toaster />\r\n//         <main className=\"chart-container\">\r\n//           <h1>Source Distribution</h1>\r\n//           <section>\r\n//             <input\r\n//               type=\"text\"\r\n//               placeholder=\"Filter sources...\"\r\n//               value={filterText}\r\n//               onChange={handleFilterChange}\r\n//             />\r\n//             <BarChart\r\n//               data_1={filteredCounts}\r\n//               data_2={[]} // No second dataset needed\r\n//               title_1=\"Country Count\"\r\n//               title_2=\"\"\r\n//               bgColor_1=\"rgba(53, 162, 255, 0.5)\"\r\n//               bgColor_2=\"\"\r\n//               labels={filteredLabels}\r\n//               horizontal={true} // Adjust as necessary\r\n//             />\r\n//             <h2>Pest Occurrences</h2>\r\n//           </section>\r\n//         </main>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default SourceFilter;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { BarChart } from '../ReactCharts/Barcharts'; // Adjust the import path as needed\r\nimport toast, { Toaster } from 'react-hot-toast';\r\nimport Navbar from \"../components/Navbar\";\r\n\r\nconst SourceFilter = () => {\r\n  const [countryLabels, setCountryLabels] = useState([]);\r\n  const [countryCounts, setCountryCounts] = useState([]);\r\n  const [filterText, setFilterText] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const userResponse = await axios.get('/api/v1/data/get-pestle');\r\n        const countries = userResponse.data.Pest.filter(Boolean); // Filter out empty strings\r\n        const countryCountMap = countries.reduce((acc, country) => {\r\n          acc[country] = (acc[country] || 0) + 1;\r\n          return acc;\r\n        }, {});\r\n\r\n        const labels = Object.keys(countryCountMap);\r\n        const counts = Object.values(countryCountMap);\r\n\r\n        setCountryLabels(labels);\r\n        setCountryCounts(counts);\r\n\r\n        toast.success(\"Data fetched successfully\");\r\n      } catch (error) {\r\n        toast.error('Error fetching data');\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleFilterChange = (event) => {\r\n    setFilterText(event.target.value);\r\n  };\r\n\r\n  const filteredLabels = countryLabels.filter((label) =>\r\n    label.toLowerCase().includes(filterText.toLowerCase())\r\n  );\r\n  const filteredCounts = filteredLabels.map((label) => countryCounts[countryLabels.indexOf(label)]);\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-100\">\r\n      <Navbar />\r\n      <Toaster />\r\n      <main className=\"container mx-auto px-4 py-8\">\r\n        <h1 className=\"text-3xl font-bold mb-4\">Source Distribution</h1>\r\n        <section>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Filter sources...\"\r\n            value={filterText}\r\n            onChange={handleFilterChange}\r\n            className=\"w-full px-4 py-2 mb-4 rounded-lg border-gray-300 focus:outline-none focus:border-blue-500\"\r\n          />\r\n          <BarChart\r\n            data_1={filteredCounts}\r\n            data_2={[]} // No second dataset needed\r\n            title_1=\"Country Count\"\r\n            title_2=\"\"\r\n            bgColor_1=\"rgba(53, 162, 255, 0.5)\"\r\n            bgColor_2=\"\"\r\n            labels={filteredLabels}\r\n            horizontal={true} // Adjust as necessary\r\n          />\r\n          <h2 className=\"text-xl font-bold mt-4\">Pest Occurrences</h2>\r\n        </section>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SourceFilter;\r\n","import React from 'react';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"];\r\n\r\nconst BarChart = ({\r\n  data_1 = [],\r\n  data_2 = [],\r\n  title_1,\r\n  title_2,\r\n  bgColor_1,\r\n  bgColor_2,\r\n  horizontal = false,\r\n  labels = months,\r\n}) => {\r\n  const options = {\r\n    responsive: true,\r\n    indexAxis: horizontal ? \"y\" : \"x\",\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n      title: {\r\n        display: false,\r\n      },\r\n    },\r\n    scales: {\r\n      y: {\r\n        beginAtZero: true,\r\n        grid: {\r\n          display: false,\r\n        },\r\n      },\r\n      x: {\r\n        grid: {\r\n          display: false,\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const data = {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        label: title_1,\r\n        data: data_1,\r\n        backgroundColor: bgColor_1,\r\n        barThickness: \"flex\",\r\n        barPercentage: 1,\r\n        categoryPercentage: 0.4,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return <Bar options={options} data={data} />;\r\n};\r\n\r\nexport { BarChart };\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nconst Navbar = () => {\r\n  return (\r\n    <>\r\n      <nav className=\"flex justify-between items-center bg-gray-600 p-4\">\r\n      <Link to=\"/\" className=\"text-white text-2xl\">BlackCoffer Assigment\r\n      </Link>\r\n      <div className=\"flex gap-4\">\r\n        <Link to=\"/\" className=\"text-white text-lg\">Home</Link>\r\n        <Link to=\"/dashboard\"  className=\"text-white text-lg\">Dashboard</Link>\r\n      </div>\r\n    </nav>\r\n \r\n    </>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n"],"names":["SourceFilter","countryLabels","setCountryLabels","useState","countryCounts","setCountryCounts","filterText","setFilterText","useEffect","async","userResponse","axios","get","countryCountMap","data","Pest","filter","Boolean","reduce","acc","country","labels","Object","keys","counts","values","toast","success","error","console","fetchData","filteredLabels","label","toLowerCase","includes","filteredCounts","map","indexOf","_jsxs","className","children","_jsx","Navbar","Toaster","type","placeholder","value","onChange","event","target","BarChart","data_1","data_2","title_1","title_2","bgColor_1","bgColor_2","horizontal","ChartJS","register","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","months","_ref","options","responsive","indexAxis","plugins","legend","display","title","scales","y","beginAtZero","grid","x","datasets","backgroundColor","barThickness","barPercentage","categoryPercentage","Bar","_Fragment","Link","to"],"sourceRoot":""}